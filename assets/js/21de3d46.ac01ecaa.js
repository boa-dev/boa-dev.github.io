"use strict";(self.webpackChunkboajs_dev=self.webpackChunkboajs_dev||[]).push([[8130],{3272:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>g,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var s=t(4848),o=t(8453);const i={sidebar_position:2},r="Debugging Tokens and AST nodes",d={id:"debugging/debug_tokens_ast",title:"Debugging Tokens and AST nodes",description:"The first thing boa will do is to generate tokens from the source code.",source:"@site/docs/debugging/debug_tokens_ast.md",sourceDirName:"debugging",slug:"/debugging/debug_tokens_ast",permalink:"/docs/debugging/debug_tokens_ast",draft:!1,unlisted:!1,editUrl:"https://github.com/boa-dev/boa-dev.github.io/tree/main/docs/docs/debugging/debug_tokens_ast.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"infoSidebar",previous:{title:"Debugging Boa",permalink:"/docs/debugging/debug_intro"},next:{title:"Tracing Boa's Virtual Machine",permalink:"/docs/debugging/debug_trace"}},a={},c=[];function u(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"debugging-tokens-and-ast-nodes",children:"Debugging Tokens and AST nodes"}),"\n",(0,s.jsx)(n.p,{children:"The first thing boa will do is to generate tokens from the source code.\nThese tokens are then parsed into an abstract syntax tree (AST).\nAny syntax errors should be thrown while the AST is generated."}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:"boa_cli"})," command-line flag ",(0,s.jsx)(n.code,{children:"--dump-ast"})," to print the AST.\nThe flag supports these formats: ",(0,s.jsx)(n.code,{children:"Debug"}),", ",(0,s.jsx)(n.code,{children:"Json"}),", ",(0,s.jsx)(n.code,{children:"JsonPretty"}),". By default\nit is the ",(0,s.jsx)(n.code,{children:"Debug"})," format."]}),"\n",(0,s.jsx)(n.p,{children:"Dumping the AST of a file:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo run -- test.js --dump-ast # AST dump format is Debug by default.\n"})}),"\n",(0,s.jsx)(n.p,{children:"or with interactive mode (REPL):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cargo run -- --dump-ast # AST dump format is Debug by default.\n"})})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>d});var s=t(6540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);