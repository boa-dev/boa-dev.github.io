<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Boa</title>
  <description>The blog and website for Boa</description>
  <link href="https://boa-dev.github.io/feed.xml" rel="self"/>
  <link href="https://boa-dev.github.io/"/>
  <updated>2022-05-23T22:07:54Z</updated>
  <id>https://boa-dev.github.io/</id>
  <author>
    <name>Boa Developers</name>
  </author>
  
  <entry>
    <title>Boa v0.9: measureme &amp; optimisations</title>
    <link href="https://boa-dev.github.io/2020/07/03/boa-release-09.html"/>
    <updated>2020-07-03T00:00:00Z</updated>
    <id>https://boa-dev.github.io/2020/07/03/boa-release-09.html</id>
    <content type="html">&lt;p&gt;Hello World!&lt;/p&gt;
&lt;p&gt;Boa is an experimental Javascript lexer, parser and compiler written in Rust. It has support for some of the language, can be embedded in Rust projects fairly easily and also used from the command line.&lt;br /&gt;
Boa also exists to serve as a Rust implementation of the EcmaScript specification, there will be areas where we can utilise Rust and its fantastic ecosystem to make a fast, concurrent and safe engine.&lt;/p&gt;
&lt;p&gt;Today we&#39;re pleased to announce our latest release, version 0.9.&lt;br /&gt;
v0.9 is by far the biggest release we&#39;ve had since Boa began. You can find the full changes from the &lt;a href=&quot;https://github.com/boa-dev/boa/blob/main/CHANGELOG.md#-090-2020-06-25---move-to-organisation-78-faster-execution-time&quot;&gt;changelog&lt;/a&gt;. The milestone behind this version was further optimisation and an increase in new features. We can show you how we can identify areas that can be optimised.&lt;/p&gt;
&lt;h2&gt;Better tooling for profiling&lt;/h2&gt;
&lt;p&gt;Boa became the first Rust project to make use of &lt;a href=&quot;https://github.com/rust-lang/measureme&quot;&gt;measureme&lt;/a&gt;, a profiling tool built from the ground up for Rust. This was only used by the Rust team themselves to profile the compiler. We managed to work with the compiler team to get the framework in a good enough state to be used by other projects too, and in this release, we gave it a try.&lt;/p&gt;
&lt;p&gt;Measure me lets you profile various areas of your choosing, then you can generate a trace file which can be loaded into Chromium or various other tools for analysis.
We took it for a spin (which you&#39;ll see in Object Specialization).&lt;/p&gt;
&lt;p&gt;Below is an example of our trace, this is using a measureme tool called &lt;code&gt;summarize&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+----------------------------+-----------+-----------------+----------+------------+
| Item                       | Self time | % of total time | Time     | Item count |
+----------------------------+-----------+-----------------+----------+------------+
| From&amp;lt;Object&amp;gt;               | 1.04ms    | 14.776          | 1.04ms   | 146        |
+----------------------------+-----------+-----------------+----------+------------+
| new_object                 | 356.50µs  | 5.082           | 533.50µs | 18         |
+----------------------------+-----------+-----------------+----------+------------+
| create_instrinsics         | 263.50µs  | 3.756           | 6.38ms   | 1          |
+----------------------------+-----------+-----------------+----------+------------+
| make_builtin_fn: toString  | 218.50µs  | 3.114           | 290.50µs | 12         |
+----------------------------+-----------+-----------------+----------+------------+
| String                     | 81.60µs   | 1.163           | 961.60µs | 1          |
+----------------------------+-----------+-----------------+----------+------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can read more about Rust&#39;s usage of measureme &lt;a href=&quot;https://blog.rust-lang.org/inside-rust/2020/02/25/intro-rustc-self-profile.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Object Specialization&lt;/h2&gt;
&lt;p&gt;In JavaScript internal metadata for objects are stored in &lt;code&gt;internal slots&lt;/code&gt;. In Boa we stored internal slots as a hashmap tied to the object, with the keys being strings and the values as &lt;a href=&quot;https://github.com/boa-dev/boa/blob/73f65f7800917c92f86134eaa21751c1ca93d986/boa/src/builtins/value/mod.rs#L57-L78&quot;&gt;&lt;code&gt;JSValues&lt;/code&gt;&lt;/a&gt;. This meant we needed to constantly unwrap them into a Rust primitive to access the data. Secondly we were restricted as to what type of data we could put in internal slots. For example, lets say we want to implement &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; by using the native &lt;a href=&quot;https://doc.rust-lang.org/std/collections/struct.HashSet.html&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt; as a backing store, this would not be possible.&lt;/p&gt;
&lt;p&gt;By changing how internal data is handled for some of our builtin objects and removing a whole bunch of redundant access checks, we managed to speed up the interpreter.&lt;/p&gt;
&lt;p&gt;Boa would spend a significant amount of time converting back and forth between JS Values and primitive values. We found a huge amount of time was spent in &lt;code&gt;Value::set_field&lt;/code&gt; before any code had even been executed. &lt;code&gt;set_field&lt;/code&gt; was slow due to the amount of updating of internal slots as part of setting up. Here you can see realm creation takes roughly 60ms (dev build).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We use &lt;a href=&quot;https://github.com/rust-lang/measureme/blob/main/crox/Readme.md&quot;&gt;Crox&lt;/a&gt; to convert our measureme data into a format Chrome&#39;s performance tab understands&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://boa-dev.github.io/images/2020-07-03/before.png&quot; alt=&quot;Before&quot; /&gt;&lt;/p&gt;
&lt;p&gt;We refactored many builtins to hold an &lt;code&gt;ObjectData&lt;/code&gt; enum variant instead, some of which can hold a value for the type also.
This can be used to both identify objects and to use their internal data.&lt;br /&gt;
Here is an example of our enum.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/// Defines the different types of objects.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token attribute attr-name&quot;&gt;#[derive(Debug, Trace, Finalize, Clone)]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;token type-definition class-name&quot;&gt;ObjectData&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;BigInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RcBigInt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RcString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;f64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Symbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;RcSymbol&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Ordinary&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://boa-dev.github.io/images/2020-07-03/after.png&quot; alt=&quot;After&quot; /&gt;&lt;/p&gt;
&lt;p&gt;This gave us a 70% speedup and reduced startup time by well over half. The &lt;code&gt;realm::create&lt;/code&gt; function now runs in 13ms instead of 60ms.&lt;/p&gt;
&lt;h2&gt;Optimised Type Comparisons&lt;/h2&gt;
&lt;p&gt;If you&#39;ve ever called &lt;code&gt;typeof&lt;/code&gt; in JavaScript, you get a string value describing the primitive type of it&#39;s argument. Boa was doing the same internally for comparing (using the &amp;quot;get_type()&amp;quot; call), however getting the string value from each primitive then comparing them is not very performant.&lt;br /&gt;
Now, thanks to @Lan2u we have a rust &lt;a href=&quot;https://github.com/boa-dev/boa/blob/8f8498eac17164c8de2f599bd0b7ba2e8053ec30/boa/src/builtins/value/val_type.rs#L4-L17&quot;&gt;&lt;code&gt;Type&lt;/code&gt;&lt;/a&gt; enum which makes comparing more efficient and on average brings another 8% performance boost.&lt;/p&gt;
&lt;h2&gt;JSValue Refactor&lt;/h2&gt;
&lt;p&gt;We have completely refactored how JavaScript values are stored.&lt;br /&gt;
&lt;a href=&quot;https://github.com/boa-dev/boa/pull/498&quot;&gt;#498&lt;/a&gt; makes values more lightweight by only GC&#39;ing objects and not the primitives. The primitive scalar values are just Rust primitives which implement the Copy trait, so the overhead of moving these around is much lower.&lt;br /&gt;
By decoupling our &lt;code&gt;Value&lt;/code&gt; types and &lt;code&gt;GC&lt;/code&gt; types we have brought our &lt;code&gt;Value&lt;/code&gt; size from 40 bytes =&amp;gt; 24 bytes and an 80% reduction in arithmetic operations!&lt;/p&gt;
&lt;h2&gt;Parser rebuild, better code organisation&lt;/h2&gt;
&lt;p&gt;Boa was predominantly 3 files. The lexer, parser and interpreter.&lt;br /&gt;
The naive implementation of the parser was a &lt;a href=&quot;https://github.com/boa-dev/boa/blob/c23a7b1f4ac57af6c5f0b9f6c98fbbed7a14c98f/src/lib/syntax/parser.rs&quot;&gt;single file&lt;/a&gt; which had a long match expression for tokens and went through every token figuring out what to do. This did the job but became unmaintainable when adding new features.&lt;br /&gt;
We have been breaking the parser up into separate modules, which represent various expressions and statements that conform to the specification. (more about this in a future post).&lt;/p&gt;
&lt;p&gt;After all the fixes in this release we&#39;ve seen on average a 70% improvement, we still have areas where we plan to improve. We are currently rebuilding the lexer so it is more broken up like the parser and interpreter, we will blog about this soon in future.&lt;/p&gt;
&lt;h2&gt;Roadmap&lt;/h2&gt;
&lt;h3&gt;&lt;em&gt;How much of the specification is covered?&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;Our next milestone is to tidy up the lexer so it takes into account &lt;a href=&quot;https://tc39.es/ecma262/#sec-context-free-grammars&quot;&gt;&lt;code&gt;goal symbols&lt;/code&gt;&lt;/a&gt; then we plan to start running Test 262, the official ECMAScript Test Suite. It has a lot of tests (over 29272 test files) and will tell us in detail which parts of the specification need work.&lt;br /&gt;
There are also large items like classes which are still not covered, however, these should now be easier to implement with parsing broken up.&lt;/p&gt;
&lt;h3&gt;&lt;em&gt;Public API&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/boa-dev/boa/issues/445&quot;&gt;#445&lt;/a&gt; looks to improve the public API too so Rust projects can interactive with Boa more easily.&lt;br /&gt;
It should be possible today to just use the lexer, parser or the whole execution path.&lt;/p&gt;
&lt;p&gt;We hope to add more detail in future on how some parts of Boa work, make sure you stay tuned for any future posts!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Boa release v0.10</title>
    <link href="https://boa-dev.github.io/2020/10/02/boa-release-10.html"/>
    <updated>2020-10-02T00:00:00Z</updated>
    <id>https://boa-dev.github.io/2020/10/02/boa-release-10.html</id>
    <content type="html">&lt;p&gt;Boa is an experimental Javascript lexer, parser and compiler written in Rust. It has support for some of the language, can be embedded in Rust projects fairly easily and also used from the command line.
Boa also exists to serve as a Rust implementation of the EcmaScript specification, there will be areas where we can utilise Rust and its fantastic ecosystem to make a fast, concurrent and safe engine.&lt;/p&gt;
&lt;p&gt;We have a long way to go, however v0.10 has been the biggest release to date, with 138 issues closed!&lt;/p&gt;
&lt;p&gt;We have some highlights, but if you prefer to read the full changelog, you can do that &lt;a href=&quot;https://github.com/boa-dev/boa/blob/main/CHANGELOG.md&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Test262&lt;/h2&gt;
&lt;p&gt;One question we&#39;ve been asked for a long time is &amp;quot;how conformant are you to the spec?&amp;quot;. It&#39;s been tough to answer as we&#39;ve been unable to run against the official test suite.&lt;/p&gt;
&lt;p&gt;Test262 is the official ECMAScript Test Suite and exists to provide conformance tests for the latest drafts of the Ecma specification. It is used for all engines, you can even run it in your &lt;a href=&quot;https://bakkot.github.io/test262-web-runner/&quot;&gt;browser&lt;/a&gt;.&lt;br /&gt;
Thanks to @Razican in v0.10 we now have a test harness that allows us to run it against Boa at any time.&lt;/p&gt;
&lt;p&gt;This is a new crate inside the Boa repository that can parse through all of the tests (roughly 40,000 of them) in under 10 minutes and tell us how conformant we are.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://boa-dev.github.io/images/2020-10-02/test262-screenshot.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Today Boa has &lt;span class=&quot;x x-first x-last&quot;&gt;18&lt;/span&gt;% conformity to the specification. We&#39;ll be keeping an eye on this number over the releases. We expect to achieve around 30% by 0.11 due to some of the fixes we&#39;re adding which should pass a few thousand tests.&lt;/p&gt;
&lt;p&gt;These are run via Github Actions against PRs and for our main branch so that we can keep track of where we are and if there are regressions.&lt;/p&gt;
&lt;h2&gt;Built-ins&lt;/h2&gt;
&lt;p&gt;We&#39;ve added support for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date&quot;&gt;&lt;code&gt;Date&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol&quot;&gt;well-known symbols&lt;/a&gt;. Supporting Well-known symbols unblocks a lot of work around adding &lt;code&gt;@@iterators&lt;/code&gt; to some of our global objects which is coming up in the next release.&lt;br /&gt;
Both &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;Number&lt;/code&gt; have had their remaining methods implemented.&lt;/p&gt;
&lt;h2&gt;Lexer&lt;/h2&gt;
&lt;p&gt;The lexer has been rebuilt from scratch. Just like the old parser it was a single file before looping through and becoming unmaintainable. Today we&#39;ve reorganised it into separate modules which know how to lex certain areas. The new lexer &lt;a href=&quot;https://github.com/boa-dev/boa/issues/294&quot;&gt;now supports goal symbols&lt;/a&gt; and can now tokenize with the correct context at any time.&lt;/p&gt;
&lt;h3&gt;Goal Symbols&lt;/h3&gt;
&lt;p&gt;Our issue with goal symbols is explained by the V8 team:
&lt;a href=&quot;https://v8.dev/blog/understanding-ecmascript-part-3#lexical-grammar&quot;&gt;https://v8.dev/blog/understanding-ecmascript-part-3#lexical-grammar&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Previously we weren&#39;t distinguishing between the contexts where some input elements are permitted and some are not, so lexing &lt;code&gt;/&lt;/code&gt; would yeild a &lt;code&gt;division&lt;/code&gt; symbols when it should be a &lt;code&gt;RegularExpressionLiteral&lt;/code&gt; for example. This change unblocked us being able to run Test262.&lt;/p&gt;
&lt;p&gt;Performance wise it is much faster for larger files. The lexer is far more efficient at streaming tokens to the parser than previously so in some scenarios we have big gains.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;You can see all the benchmarks &lt;a href=&quot;https://boa-dev.github.io/boa/dev/bench/&quot;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Repl syntax highlighting&lt;/h2&gt;
&lt;p&gt;Syntax highlighting was added to the repl this release thanks to @HalidOdat&lt;br /&gt;
Our repl is made possible due to the great work of &lt;a href=&quot;https://github.com/kkawakam/rustyline&quot;&gt;RustyLine&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://boa-dev.github.io/images/2020-10-02/syntaxHighlighting.gif&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Looking forward&lt;/h2&gt;
&lt;p&gt;There are plenty of fixes and performance changes still needed, we also hope to experiment with producing Bytecode from our AST in future. Test262 coverage will almost certainly increase, and we are polishing the public API for easier use when embedding into other Rust projects.&lt;/p&gt;
&lt;p&gt;Thanks to all those who contributed to 0.10, you can see the names in the full changelog linked above.&lt;/p&gt;
&lt;p&gt;You can checkout Boa via &lt;a href=&quot;https://github.com/boa-dev/boa&quot;&gt;Github&lt;/a&gt; or on &lt;a href=&quot;https://crates.io/crates/Boa&quot;&gt;crates.io&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Boa release v0.11</title>
    <link href="https://boa-dev.github.io/2021/01/14/boa-release-11.html"/>
    <updated>2021-01-14T00:00:00Z</updated>
    <id>https://boa-dev.github.io/2021/01/14/boa-release-11.html</id>
    <content type="html">&lt;p&gt;Boa has reached a new release. v0.11, our biggest one yet!&lt;/p&gt;
&lt;p&gt;Since v0.10 we&#39;ve closed 77 issues and merged 129 pull requests. The engine has been faster and more compliant to the spec. Below are some of the highlights but please see the &lt;a href=&quot;https://github.com/boa-dev/boa/blob/main/CHANGELOG.md#0110-2021-01-14&quot;&gt;changelog&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;What is Boa? See the &lt;a href=&quot;https://boa-dev.github.io/about&quot;&gt;About&lt;/a&gt; page for more info.&lt;/p&gt;
&lt;h2&gt;Test 262&lt;/h2&gt;
&lt;p&gt;Test262 is the implementation conformance test suite maintained by TC39. It&#39;s used by nearly all engines to measure how conformant they are to the specification. Boa pulls the tests in-tree and runs them against all PRs. You can find more about Test262 &lt;a href=&quot;https://github.com/tc39/test262&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since v0.10 we have almost doubled on spec conformance, and reduced panics. A year ago Boa didn&#39;t even track itself against Test262 so it was difficult to know how compliant we were to the spec, today not only do we track all changes against Test262 but we can see progress on a PR to PR basis.&lt;/p&gt;
&lt;img class=&quot;light&quot; src=&quot;https://boa-dev.github.io/images/2021-01-14/conformance_light.png&quot; /&gt;
&lt;img class=&quot;dark&quot; src=&quot;https://boa-dev.github.io/images/2021-01-14/conformance_dark.png&quot; /&gt;
&lt;p&gt;Previously many tests failed to run as the test-runner was still being worked on. Those issues have been fixed and our tests jumped from 38k to 78K which is why the graph flips up above. Boa should never panic, however we&#39;ve had many tests reveal areas where panics happen, this has helped us identify and apply correct fixes, to the point where our panics have gone from hundreds to under 50 (the graph above shows the dark red diminishing).&lt;/p&gt;
&lt;p&gt;For live tracking of conformance tests you can check &lt;a href=&quot;https://boa-dev.github.io/boa/test262/&quot;&gt;here&lt;/a&gt;. Below is a snapshot of the previous version and today.&lt;/p&gt;
&lt;div class=&quot;row&quot; style=&quot;display: flex; justify-content: space-around;&quot;&gt;
        &lt;section class=&quot;col-md-4&quot; style=&quot;&quot; id=&quot;version-latest&quot;&gt;&lt;div class=&quot;card&quot;&gt;&lt;div class=&quot;card-body&quot;&gt;&lt;h3&gt;v0.10:&lt;/h3&gt;&lt;ul class=&quot;list-group list-group-flush&quot;&gt;&lt;li class=&quot;list-group-item&quot;&gt;Total tests: &lt;span class=&quot;total-tests&quot;&gt;38,706&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;list-group-item&quot;&gt;Passed tests: &lt;span class=&quot;passed-tests&quot;&gt;6,960&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;list-group-item&quot;&gt;Ignored tests: &lt;span class=&quot;ignored-tests&quot;&gt;5,748&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;list-group-item&quot;&gt;Failed tests: &lt;span class=&quot;failed-tests&quot;&gt;25,998&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;list-group-item&quot;&gt;Conformance: &lt;b&gt;17.98%&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;info-link&quot;&gt;&lt;a class=&quot;card-link&quot; href=&quot;https://boa-dev.github.io/2021/01/14/boa-release-11.html#&quot;&gt;&lt;span class=&quot;info-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
        &lt;section class=&quot;col-md-4&quot; style=&quot;&quot; id=&quot;master-latest&quot;&gt;&lt;div class=&quot;card&quot;&gt;&lt;div class=&quot;card-body&quot;&gt;&lt;h3&gt;v0.11:&lt;/h3&gt;&lt;ul class=&quot;list-group list-group-flush&quot;&gt;&lt;li class=&quot;list-group-item&quot;&gt;Total tests: &lt;span class=&quot;total-tests&quot;&gt;78,497&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;list-group-item&quot;&gt;Passed tests: &lt;span class=&quot;passed-tests&quot;&gt;24,550&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;list-group-item&quot;&gt;Ignored tests: &lt;span class=&quot;ignored-tests&quot;&gt;15,585&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;list-group-item&quot;&gt;Failed tests: &lt;span class=&quot;failed-tests&quot;&gt;38,362 (24 ⚠)&lt;/span&gt;&lt;/li&gt;&lt;li class=&quot;list-group-item&quot;&gt;Conformance: &lt;b&gt;31.28%&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div class=&quot;info-link&quot;&gt;&lt;a class=&quot;card-link&quot; href=&quot;https://boa-dev.github.io/2021/01/14/boa-release-11.html#&quot;&gt;&lt;span class=&quot;info-link&quot;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/section&gt;
        &lt;section class=&quot;col-md-4&quot; style=&quot;display: none&quot; id=&quot;old-versions&quot;&gt;&lt;/section&gt;
&lt;/div&gt;
&lt;h2&gt;Regress&lt;/h2&gt;
&lt;p&gt;In this release Boa switched from its own implementation (wrapping &lt;code&gt;regex&lt;/code&gt;) to the &lt;a href=&quot;https://github.com/ridiculousfish/regress&quot;&gt;&lt;code&gt;regress&lt;/code&gt;&lt;/a&gt; engine for regular expressions. Regress is a crate aiming to implement ECMAScript compliant regular expressions and Boa makes use of (and contributes back to) that.&lt;/p&gt;
&lt;p&gt;While Regress is not 100% spec compliant this is something which is being worked on, also the switch gave us quite a performance boost in our &lt;a href=&quot;https://boa-dev.github.io/boa/dev/bench/&quot;&gt;benchmarks&lt;/a&gt; we&#39;re seeing almost 6X faster execution.&lt;/p&gt;
&lt;img class=&quot;light&quot; src=&quot;https://boa-dev.github.io/images/2021-01-14/regex-bench-white.png&quot; /&gt;
&lt;img class=&quot;dark&quot; src=&quot;https://boa-dev.github.io/images/2021-01-14/regex-bench-dark.png&quot; /&gt;
&lt;p&gt;The above image shows a big drop in the middle of the graph, above &lt;code&gt;fb1b8d5&lt;/code&gt; is where we switched over. Conformance went from 19.01% to 18.99% and introduced some panics, however many of those have since been fixed.&lt;/p&gt;
&lt;h2&gt;Iterating over bytes&lt;/h2&gt;
&lt;p&gt;Previously the lexer iterated over unicode chars (u32 code points), this wasn&#39;t strictly neccesary for Boa and we have instead changed the lexer to work over bytes (u8). Iterating over bytes rather than chars is inherently much faster, non-ascii UTF8 bytes are all &amp;gt;=128, and we might only really care about those being correct when parsing idents. This is standard practise amongs lexical analyzers and even browsers read source code byte-by-byte, using the rules of the language&#39;s syntax to convert the source text into tokens.&lt;/p&gt;
&lt;p&gt;This was worked on by @jevancc and his &lt;a href=&quot;https://github.com/boa-dev/boa/pull/915/files&quot;&gt;changes&lt;/a&gt; have improved performance overall.&lt;/p&gt;
&lt;h2&gt;Embedding examples&lt;/h2&gt;
&lt;p&gt;We are still working on what the public API should look like, some of these decisions are driven by feedback and the ever-changing way which Boa works.&lt;br /&gt;
Not only you can run Boa against javascript today you can also embed your own objects and classes into the engine before it&#39;s ran.&lt;/p&gt;
&lt;p&gt;We&#39;ve offered an &lt;a href=&quot;https://github.com/boa-dev/boa/blob/main/boa/examples/classes.rs&quot;&gt;example&lt;/a&gt; to show how a class can be constructed in Rust then added to the environment before executing your scripts.
This should offer a great insight into how you can interop Rust with JavaScript by using Boa.&lt;/p&gt;
&lt;p&gt;Below are some of the more recent functions available from the Context object for you to add your own functionality.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Rust implementation of a function injected into the environment&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register_global_function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Rust implementation of a class injected into the environment&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register_global_class&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Rust implementation of a property injected into the environment&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register_global_property&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there are any examples you would like added, please raise an issue on the main repository.&lt;/p&gt;
&lt;h2&gt;Generating bytecode&lt;/h2&gt;
&lt;p&gt;Today Boa walks the tree of the AST, although easy to implement it&#39;s not ideal for performance.&lt;br /&gt;
We are looking to do code generation which can then be interpreted. This gradual process may happen over many releases until at some point we can switch implementations under the hood. Our steps are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;s&gt;Experiment with VM Path on isolated branch&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;&lt;s&gt;Experiment with generating more simpler instructions&lt;/s&gt;&lt;/li&gt;
&lt;li&gt;Build up parity with current implementation&lt;/li&gt;
&lt;li&gt;Run test suite over VM path including conformance tests&lt;/li&gt;
&lt;li&gt;Switch over once performance is steady&lt;/li&gt;
&lt;li&gt;Optimize code generation and intreperter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Thank You&lt;/h2&gt;
&lt;p&gt;Everything in this release has been such a huge effort, we want to thank all the &lt;a href=&quot;https://github.com/boa-dev/boa/graphs/contributors?from=2020-10-02&amp;amp;to=2021-01-12&amp;amp;type=c&quot;&gt;contributors&lt;/a&gt; in this release, whether it was features, fixes or raising bugs.&lt;/p&gt;
&lt;p&gt;If you&#39;re interested in contributing to Boa, we have some &lt;a href=&quot;https://github.com/boa-dev/boa/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&quot;&gt;&amp;quot;good first issues&amp;quot;&lt;/a&gt; and &lt;a href=&quot;https://github.com/boa-dev/boa/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22&quot;&gt;&amp;quot;issues where help is wanted&amp;quot;&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Boa release v0.12</title>
    <link href="https://boa-dev.github.io/2021/06/07/boa-release-12.html"/>
    <updated>2021-06-07T00:00:00Z</updated>
    <id>https://boa-dev.github.io/2021/06/07/boa-release-12.html</id>
    <content type="html">&lt;p&gt;Boa v0.12 is here! Boa is a JavaScript parser, compiler and executor written in the Rust programming language. It makes it easy to embed a JS engine in your projects, and you can even use it from webassembly. See the &lt;a href=&quot;https://boa-dev.github.io/about&quot;&gt;About&lt;/a&gt; page for more info.&lt;/p&gt;
&lt;p&gt;We currently support part of the language. In this release, our conformance has grown to 33.97% of the official ECMAScript Test Suite (Test262). In this release, we have closed 19 issues and merged 69 pull requests. You can check the full list of changes &lt;a href=&quot;https://github.com/boa-dev/boa/blob/v0.12/CHANGELOG.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let&#39;s dive into the most relevant changes of this release.&lt;/p&gt;
&lt;h2&gt;Panic-free&lt;/h2&gt;
&lt;p&gt;Boa now doesn&#39;t panic in any of the Test262 tests. This is a huge milestone, since it means that the engine itself can handle all of the edge cases. At least those proposed by the official ECMAScript test suite. We still recommend using &lt;a href=&quot;https://doc.rust-lang.org/stable/std/panic/fn.catch_unwind.html&quot;&gt;&lt;code&gt;std::panic::catch_unwind()&lt;/code&gt;&lt;/a&gt; to execute arbitrary code, though.&lt;/p&gt;
&lt;h2&gt;Conformance increase&lt;/h2&gt;
&lt;p&gt;In version 0.11 we were passing 31.59% of the Test262 suite. In this version, we have increased that coverage to &lt;strong&gt;33.97%&lt;/strong&gt;. The increase might not seem much, but we now pass 1,924 new tests.&lt;/p&gt;
&lt;p&gt;Our conformance tester has also been improved, and thanks to the new APIs available in the engine, we were able to add complex functionality such as &amp;quot;realm&amp;quot; creation, cross-real symbols and overall, the inclusion of a partially complete &lt;code&gt;$262&lt;/code&gt; object, ready for some testing.&lt;/p&gt;
&lt;p&gt;We have also added some useful lists of &amp;quot;fixed&amp;quot;, &amp;quot;broken&amp;quot;, &amp;quot;ignored&amp;quot; and &amp;quot;fixed panics&amp;quot; tests for each pull request. This will allow us to directly check individual tests on each PR and only re-run the new tests that are failing/panicking in order to properly fix them.&lt;/p&gt;
&lt;h2&gt;New built-in objects, &lt;code&gt;string&lt;/code&gt; improvements and &lt;code&gt;@@ToStringTag&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Boa now has support for the &lt;code&gt;Reflect&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; built-in objects. This grows the posibilities of the engine to be used in more real-world projects. On the same lines, we have added support for the &lt;code&gt;GetOwnProperty&lt;/code&gt; for &lt;code&gt;string&lt;/code&gt;. This means that we can use &lt;code&gt;[{index}]&lt;/code&gt; to get the characters of a string. For example, &lt;code&gt;&amp;quot;hello&amp;quot;[0]&lt;/code&gt; will return &lt;code&gt;&amp;quot;h&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We have also added the &lt;code&gt;@@ToStringTag&lt;/code&gt; well known symbol to most of the built-in objects. You can now run the following code, for example, and get the expected result:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toStringTag&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Returns &quot;Map&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Thank you&lt;/h2&gt;
&lt;p&gt;Everything in this release has been such a huge effort, we want to thank all the &lt;a href=&quot;https://github.com/boa-dev/boa/graphs/contributors?from=2021-01-12&amp;amp;to=2021-06-07&amp;amp;type=c&quot;&gt;contributors&lt;/a&gt; in this release, whether it was features, fixes or raising bugs.&lt;/p&gt;
&lt;p&gt;If you&#39;re interested in contributing to Boa, we have some &lt;a href=&quot;https://github.com/boa-dev/boa/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&quot;&gt;&amp;quot;good first issues&amp;quot;&lt;/a&gt; and &lt;a href=&quot;https://github.com/boa-dev/boa/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22&quot;&gt;&amp;quot;issues where help is wanted&amp;quot;&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Boa release v0.13</title>
    <link href="https://boa-dev.github.io/2021/09/30/boa-release-13.html"/>
    <updated>2021-09-30T00:00:00Z</updated>
    <id>https://boa-dev.github.io/2021/09/30/boa-release-13.html</id>
    <content type="html">&lt;p&gt;Boa v0.13 is here! Boa is a JavaScript engine written in the Rust programming language. It makes it easy to embed a JS engine in your projects, and you can even use it from webassembly. See the &lt;a href=&quot;https://boa-dev.github.io/about&quot;&gt;about&lt;/a&gt; page for more info.&lt;/p&gt;
&lt;p&gt;We currently support part of the language. In this release, our conformance has grown to 41.97% of the official ECMAScript Test Suite (Test262). We have closed 40 issues and merged 105 pull requests. You can check the full list of changes &lt;a href=&quot;https://github.com/boa-dev/boa/blob/v0.13/CHANGELOG.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This release brings some new features, such as support for calling Rust closures from JavaScript to improve better interopability between JS and Rust.&lt;/p&gt;
&lt;h2&gt;ECMAScript language features&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges&quot;&gt;named capture groups&lt;/a&gt; are now implemented and enabled.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;RE_DATE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;(?&amp;lt;year&gt;[0-9]{4})-(?&amp;lt;month&gt;[0-9]{2})-(?&amp;lt;day&gt;[0-9]{2})&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; matchObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;RE_DATE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1999-12-31&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; year &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; matchObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;groups&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;year&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 1999&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; month &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; matchObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;groups&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;month&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 12&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; day &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; matchObj&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;groups&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;day&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 31&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This release brings support for the relative indexing method &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at&quot;&gt;String.prototype.at()&lt;/a&gt;. This makes it easier to fetch values at the end of an array or string instead of doing &lt;code&gt;str[str.length - 1]&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sentence &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;The quick brown fox jumps over the lazy dog.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; index &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Using an index of &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;index&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; the character returned is &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;sentence&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// expected output: &quot;Using an index of 5 the character returned is u&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Other implemented language features include destructoring assignments, &lt;code&gt;replaceAll()&lt;/code&gt;, &lt;code&gt;Object.values()&lt;/code&gt;, &lt;code&gt;Object.keys()&lt;/code&gt;, &lt;code&gt;Object.preventExtensions()&lt;/code&gt;, &lt;code&gt;splice()&lt;/code&gt;, &lt;code&gt;sort()&lt;/code&gt;, spreading objects and more.&lt;/p&gt;
&lt;h2&gt;Boa API&lt;/h2&gt;
&lt;h3&gt;Calling Rust closures from JavaScript&lt;/h3&gt;
&lt;p&gt;In addition to registering Rust functions as global JavaScript functions, our API has been expanded to register Rust closures. &lt;a href=&quot;https://docs.rs/Boa/0.13.0/boa/context/struct.Context.html#method.register_global_closure&quot;&gt;&lt;code&gt;register_global_closure&lt;/code&gt;&lt;/a&gt; allows to capture variables in closures that can be called from javascript:&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; context &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; add_value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;register_global_closure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;addOne&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;move&lt;/span&gt; &lt;span class=&quot;token closure-params&quot;&gt;&lt;span class=&quot;token closure-punctuation punctuation&quot;&gt;|&lt;/span&gt;_&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; _&lt;span class=&quot;token closure-punctuation punctuation&quot;&gt;|&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; argument &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;as_number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;unwrap&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token class-name&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;JsValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;argument &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; add_value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token macro property&quot;&gt;assert_eq!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;addOne(41)&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;into&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see the full capabilities of this feature, take a look at our &lt;a href=&quot;https://github.com/boa-dev/boa/blob/main/boa/examples/closures.rs&quot;&gt;examples&lt;/a&gt;. Thanks to @HalidOdat and @jedel1043 for their work on this.&lt;/p&gt;
&lt;h3&gt;Boa prelude&lt;/h3&gt;
&lt;p&gt;This release exposes a prelude of useful things that are already imported. This should make it more ergonomic to work with.&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;boa&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;prelude&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// This would import all the commonly-used things&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; number &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;JSValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3.1415&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; realm &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Realm&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; engine &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Interpreter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;realm&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; engine&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Math.PI&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Test 262&lt;/h2&gt;
&lt;p&gt;Test262 is the implementation conformance test suite maintained by TC39. It&#39;s used by nearly all engines to measure how conformant they are to the specification. Boa pulls the tests in-tree and runs them against all PRs.&lt;/p&gt;
&lt;p&gt;Since v0.12 we have managed to pass 6391 more tests and are 7% more conformant. This has been great progress by all involved and we hope this continues to improve. Most of these new passes have come from refactors across the codebase which have had little impact on performance, in fact, v0.13 is much faster than v0.12.&lt;/p&gt;
&lt;p&gt;You can track Boa&#39;s conformance to the specification &lt;a href=&quot;https://boa-dev.github.io/boa/test262/#&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Keeping up with Rust&lt;/h2&gt;
&lt;p&gt;Rust is changing underneath us. This means we need to make sure our code is conforming the latest standards and we&#39;re taking advantage of the best optimizations the language can provide. In order to do this we rely on Clippy, this is Rust&#39;s in-house linter. We updated our code to &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1352&quot;&gt;respect the latest Rust version&lt;/a&gt; and updated &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1356&quot;&gt;formatting&lt;/a&gt;. Often a nice bonus of doing this is getting performance improvements for free as Clippy gets more &amp;quot;smarter&amp;quot;. Thanks to @neeldug and @RageKnify for the work in this area.&lt;/p&gt;
&lt;h2&gt;Keeping things in order&lt;/h2&gt;
&lt;p&gt;Previously object properties were stored using &lt;a href=&quot;https://docs.rs/rustc-hash/1.1.0/rustc_hash/type.FxHashMap.html&quot;&gt;&lt;code&gt;FxHashMap&lt;/code&gt;&lt;/a&gt;. Despite being very fast it didn&#39;t offer any guarantees about the order. Properties need to retain the same order they were entered. In order to achieve this we switched over to &lt;a href=&quot;https://docs.rs/indexmap/1.7.0/indexmap/&quot;&gt;IndexMap&lt;/a&gt;. Traits in Rust make this easy as IndexMap was designed to be a drop-in replacement for other HashMap implementations by following the same Trait. Thanks to IndexMap offering the possibility to use alternative hashing algorithms, we could continue using the fast &lt;a href=&quot;https://docs.rs/rustc-hash/1.1.0/rustc_hash/struct.FxHasher.html&quot;&gt;&lt;code&gt;FxHasher&lt;/code&gt;&lt;/a&gt; algorithm from rustc. Performance losses were minimal on some benchmarks and we actually made some gains in others. Thanks to @raskad for their work on this&lt;/p&gt;
&lt;h2&gt;VM&lt;/h2&gt;
&lt;p&gt;There is still on-going work to utilise a VM, this is happening &lt;a href=&quot;https://github.com/boa-dev/boa/blob/main/docs/vm.md#state-of-play&quot;&gt;alongside&lt;/a&gt; how Boa runs today. Although its not exposed yet there has been plenty of refactorings to the VM in order to make it performant. Hopefully we can talk about this in more detail soon.&lt;/p&gt;
&lt;h2&gt;Opening up the discussion&lt;/h2&gt;
&lt;p&gt;As of this release Boa has begun to utilise Github&#39;s Discussions feature. You can catch more long-ranging projects &lt;a href=&quot;https://github.com/boa-dev/boa/discussions&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thank You&lt;/h2&gt;
&lt;p&gt;This has been the biggest release yet, there have been many features and fixes. We want to thank all the &lt;a href=&quot;https://github.com/boa-dev/boa/graphs/contributors?from=2021-06-01&amp;amp;to=2021-09-26&amp;amp;type=c&quot;&gt;contributors&lt;/a&gt; in this release, whether it was features, fixes or raising bugs.&lt;/p&gt;
&lt;p&gt;If you&#39;re interested in contributing to Boa, we have some &lt;a href=&quot;https://github.com/boa-dev/boa/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22&quot;&gt;&amp;quot;good first issues&amp;quot;&lt;/a&gt; and &lt;a href=&quot;https://github.com/boa-dev/boa/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22&quot;&gt;&amp;quot;issues where help is wanted&amp;quot;&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Boa release v0.14</title>
    <link href="https://boa-dev.github.io/posts/2022-03-15-boa-release-14/"/>
    <updated>2022-03-15T00:00:00Z</updated>
    <id>https://boa-dev.github.io/posts/2022-03-15-boa-release-14/</id>
    <content type="html">&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Boa v0.14 is here! After almost 6 months of development, we are very happy to present you the newest release of the Boa
JavaScript engine. Boa makes it easy to embed a JS engine in your projects, and you can even use it from webassembly. See
the &lt;a href=&quot;https://boa-dev.github.io/about&quot;&gt;about&lt;/a&gt; page for more info. Together with this release, we present you: A new way to contribute to Boa, a virtual machine, usable examples and much more.&lt;/p&gt;
&lt;p&gt;Boa currently supports part of the JavaScript language. In this release, our conformance has grown from 41.01% to 49.74%
in the official ECMAScript Test Suite (Test262). The engine now passes 43,986 tests, coming from 33,192 in Boa 0.13
(32.5% increase), and we have closed 40 issues and merged 137 pull requests. You can check the full list of changes
&lt;a href=&quot;https://github.com/boa-dev/boa/blob/v0.14/CHANGELOG.md&quot;&gt;here&lt;/a&gt;, and the full information on conformance
&lt;a href=&quot;https://boa-dev.github.io/boa/test262/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Boa has moved&lt;/h2&gt;
&lt;p&gt;First off, some breaking changes!
Boa is now &lt;a href=&quot;https://crates.io/crates/boa_engine&quot;&gt;&lt;code&gt;boa_engine&lt;/code&gt;&lt;/a&gt; on crates.io. This should bring it in line with our other packages, and allows us to resolve the &lt;a href=&quot;https://github.com/boa-dev/boa/issues/230&quot;&gt;casing issue&lt;/a&gt; we had with Boa previously. It should just be a case of changing your dependencies in cargo.toml to the new destination. The old &lt;a href=&quot;https://crates.io/crates/boa&quot;&gt;&lt;code&gt;Boa&lt;/code&gt;&lt;/a&gt; crate will no longer receive any updates.&lt;/p&gt;
&lt;h2&gt;New ECMAScript features&lt;/h2&gt;
&lt;p&gt;Boa v0.14 ships with support for &lt;code&gt;Object.getOwnPropertyNames&lt;/code&gt;, &lt;code&gt;Object.getOwnPropertySymbols&lt;/code&gt;, &lt;code&gt;Object.prototype.hasOwnProperty&lt;/code&gt;, &lt;code&gt;Array.from&lt;/code&gt;, &lt;code&gt;AggregateError&lt;/code&gt;, &lt;code&gt;Typed Arrays&lt;/code&gt;, &lt;code&gt;Proxy&lt;/code&gt;, &lt;code&gt;toLocaleString()&lt;/code&gt;, &lt;code&gt;Symbol.prototype.valueOf&lt;/code&gt;, &lt;code&gt;Array.prototype.at()&lt;/code&gt;, &lt;code&gt;String.fromCharCode&lt;/code&gt;, &lt;code&gt;Object.hasOwn&lt;/code&gt;, &lt;code&gt;Object.fromEntries&lt;/code&gt;, &lt;code&gt;Proxy&lt;/code&gt;, &lt;code&gt;Array.prototype.findLast&lt;/code&gt;, &lt;code&gt;Array.prototype.findLastIndex&lt;/code&gt;, &lt;code&gt;console.trace&lt;/code&gt;, &lt;code&gt;String.raw( template, ...substitutions )&lt;/code&gt;, and &lt;a href=&quot;https://github.com/boa-dev/boa/blob/v0.14/CHANGELOG.md&quot;&gt;more&lt;/a&gt;. There&#39;s also been several bug fixes and internal improvements, such as &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1684&quot;&gt;switching to Bors&lt;/a&gt; for our CI management.&lt;/p&gt;
&lt;h2&gt;Virtual Machine&lt;/h2&gt;
&lt;p&gt;The biggest change in this release has definitely been the switch of the main implementation to a Virtual Machine. The
JavaScript code first gets parsed into AST, then compiled into op-codes, and finally executed in the VM. This adds some
extra steps, which, for now, have reduced the performance of the engine. We hope to fix some of these degradations over the course of the next few releases so hang tight. The new VM opens the door for many great features in the future (we&#39;re looking at you, async/await), and allows some nicer optimizations in the parsing and compilation phases in which we have already started working (such as &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1829&quot;&gt;#1829&lt;/a&gt; and
&lt;a href=&quot;https://github.com/boa-dev/boa/pull/1849&quot;&gt;#1849&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This move towards a VM has also brought one great new feature, generator execution (&lt;a href=&quot;https://github.com/boa-dev/boa/pull/1790&quot;&gt;#1790&lt;/a&gt;).
You can find out more about how to use the VM &lt;a href=&quot;https://github.com/boa-dev/boa/blob/main/docs/vm.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;img class=&quot;light&quot; src=&quot;https://boa-dev.github.io/images/2022-03-15/boa_architecture_light.svg&quot; /&gt;
&lt;img class=&quot;dark&quot; src=&quot;https://boa-dev.github.io/images/2022-03-15/boa_architecture_dark.svg&quot; /&gt;
&lt;br /&gt;
&lt;h2&gt;Boa opens financial contributions&lt;/h2&gt;
&lt;p&gt;In the past months, due to the big and steady progress on Boa, we have received multiple requests to contribute to Boa
financially. From now on, anyone can contribute with either a recurring donation, or a one-time contribution in our
&lt;a href=&quot;https://opencollective.com/boa&quot;&gt;OpenCollective page&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;What does this mean for Boa?&lt;/h3&gt;
&lt;p&gt;Being able to receive financial contributions won&#39;t directly show a change in Boa development, but depending on how much
funding we get, we are already planning next steps. Having more motivated contributors would be the first step. We all
want to spend more of our free time in boa, and receiving a financial compensation for it is definitely making the team
members eager to continue contributing.&lt;/p&gt;
&lt;p&gt;But that is not our only idea. We would like to create a reproducible benchmarking platform. Currently, we just use GitHub
actions for benchmarking, which is useful to get some general ideas on how some changes affect the performance of the
engine. However, they have a high variability (up to 10%), meaning that we can definitely see changes if they are big, but it&#39;s
impossible to see differences if changes are minimal (1-2%, for example). Having the infrastructure to do proper performance
testing would require using dedicated CPUs, for example, which could be financed using the Boa Open Collective.&lt;/p&gt;
&lt;p&gt;On the development side, there are some very big projects that require deep involvement from the team. Priorities include (not neccesarily in order):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/boa-dev/boa/projects/3&quot;&gt;Async/Await support&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Better &lt;a href=&quot;https://github.com/boa-dev/boa/projects/5&quot;&gt;completion records&lt;/a&gt; implementation&lt;/li&gt;
&lt;li&gt;Performance improvement across the board.&lt;/li&gt;
&lt;li&gt;Future implementation of Shapes/Hidden Classes.&lt;/li&gt;
&lt;li&gt;Being able to measure against other engines.&lt;/li&gt;
&lt;li&gt;Improved conformance of the EcmaScript specification.&lt;/li&gt;
&lt;li&gt;Integration with &lt;a href=&quot;https://github.com/unicode-org/icu4x&quot;&gt;ICU4X&lt;/a&gt; for Intl and future Temporal implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Implementing a &lt;a href=&quot;https://github.com/boa-dev/boa/discussions/1531&quot;&gt;proper API&lt;/a&gt; for Rust crates that want to embed Boa as they
like, or a &lt;a href=&quot;https://github.com/boa-dev/boa/issues/332&quot;&gt;C API&lt;/a&gt; so that other software, not written in Rust, can use Boa,
are also a priority, and implementing all the new built-in objects to achieve 100% conformance with the ECMAScript
specification is also a must. All this takes time, and we will need to finance developers working on these big issues.&lt;/p&gt;
&lt;h3&gt;Can I contribute differently?&lt;/h3&gt;
&lt;p&gt;If financial contribution is not your strength, you can contribute by asking to be assigned to one of our
&lt;a href=&quot;https://github.com/boa-dev/boa/issues?q=is%3Aopen+is%3Aissue+no%3Aassignee&quot;&gt;open issues&lt;/a&gt;, and asking for mentoring if you
don&#39;t know your way around the engine. Our &lt;a href=&quot;https://github.com/boa-dev/boa/blob/main/CONTRIBUTING.md&quot;&gt;contribution guide&lt;/a&gt;
should help you here. If you are more used to working with JavaScript or frontend web development, we also
welcome help to improve our web presence, either in &lt;a href=&quot;https://github.com/boa-dev/boa-dev.github.io&quot;&gt;our website&lt;/a&gt;, or in
our &lt;a href=&quot;https://github.com/boa-dev/boa/issues/820&quot;&gt;testing representation&lt;/a&gt; page or benchmarks page. You can also contribute to
our Criterion benchmark comparison GitHub &lt;a href=&quot;https://github.com/boa-dev/criterion-compare-action&quot;&gt;action&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are also looking to improve the documentation of the engine, both for developers of the engine itself and for users of the
engine. Feel free to contact us in &lt;a href=&quot;https://discord.gg/tUFFk9Y&quot;&gt;Discord&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Thank You&lt;/h3&gt;
&lt;p&gt;Last but certainly not least, a big &lt;strong&gt;Thank You&lt;/strong&gt; to all the contributors of Boa.
It&#39;s not often we list them but we would like to say thank you to the new contributors who joined for the last release.&lt;/p&gt;
&lt;h4&gt;Thank you New Contributors&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/abhishekc-sharma&quot;&gt;@abhishekc-sharma&lt;/a&gt; who made their first contribution in &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1612&quot;&gt;#1612&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/kevinputera&quot;&gt;@kevinputera&lt;/a&gt; who made their first contribution in &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1606&quot;&gt;#1606&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nrabulinski&quot;&gt;@nrabulinski&lt;/a&gt; who made their first contribution in &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1614&quot;&gt;#1614&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/hle0&quot;&gt;@hle0&lt;/a&gt; who made their first contribution in &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1618&quot;&gt;#1618&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nekevss&quot;&gt;@nekevss&lt;/a&gt; who made their first contribution in &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1613&quot;&gt;#1613&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lowr&quot;&gt;@lowr&lt;/a&gt; who made their first contribution in &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1628&quot;&gt;#1628&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Nimpruda&quot;&gt;@Nimpruda&lt;/a&gt; who made their first contribution in &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1634&quot;&gt;#1634&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/atouchet&quot;&gt;@atouchet&lt;/a&gt; who made their first contribution in &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1638&quot;&gt;#1638&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/praveenbakkal&quot;&gt;@praveenbakkal&lt;/a&gt; who made their first contribution in &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1680&quot;&gt;#1680&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bsinky&quot;&gt;@bsinky&lt;/a&gt; who made their first contribution in &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1665&quot;&gt;#1665&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/TheDoctor314&quot;&gt;@TheDoctor314&lt;/a&gt; who made their first contribution in &lt;a href=&quot;https://github.com/boa-dev/boa/pull/1691&quot;&gt;#1691&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
</feed>